#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
    def initialize
        @db = PG.connect(dbname: "expenses")
        setup_schema
    end
    
    def display_menu
        text = <<~HEREDOC
        An expense recording system
    
        Commands:
        
        add AMOUNT MEMO [DATE] - record a new expense
        clear - delete all expenses
        list - list all expenses
        delete NUMBER - remove expense with id NUMBER
        search QUERY - list expenses with a matching memo field
        HEREDOC
        
        puts text
    end
       
    def list_all
        all_expenses =@db.exec("SELECT * FROM expenses")
        display_expenses(all_expenses)
    end
    
    def add_expense(amount = nil, memo = nil, date = nil)
        if !amount || !memo 
            puts "You must provide an amount and memo."
        else 
            if !date
                @db.exec_params("INSERT INTO expenses (amount, memo) VALUES ($1::numeric, $2::text)", [amount, memo])
            else 
                @db.exec_params("INSERT INTO expenses (amount, memo, created_on) VALUES ($1::numeric, $2::text, $3::date)", [amount, memo, date])
            end
        end
    end
    
    def search_expense(term)
        matching_expenses = @db.exec_params("SELECT * FROM expenses WHERE memo ILIKE $1::text", ["%" + term + "%"])
        display_expenses(matching_expenses)
    end
    
    def delete_expense(id)
        selected_expense = @db.exec_params("SELECT * FROM expenses WHERE id = $1::integer", [id])
        if selected_expense.values.empty?
            puts "There is no expense with the id '#{id}'."
        else 
            @db.exec_params("DELETE FROM expenses WHERE id = $1::integer", [id])
            puts "The following expense has been deleted:"
            display_expenses(selected_expense)
        end
    end
    
    def delete_all_expenses
        if double_check?("This will remove all expenses. Are you sure? (y/n)")
            @db.exec("DELETE FROM expenses")
            puts "All expenses have been deleted."
        end
    end
    
    private 
    
    def setup_schema
        count = @db.exec("SELECT count(*) FROM information_schema.tables
                          WHERE table_schema = 'public' 
                          AND table_name = 'expenses'").values.flatten.first.to_i
        if count == 0
            @db.exec("CREATE TABLE expenses(
                        id serial PRIMARY KEY, 
                        created_on date NOT NULL DEFAULT CURRENT_DATE,
                        amount decimal(6,2) NOT NULL CHECK(amount > 0), 
                        memo text NOT NULL
                        );")
        end
    end
    
    def display_count(list)
        if list.ntuples == 0
            puts "There are no expenses"
        else 
            puts "There #{list.ntuples == 1? "is" : "are"} #{list.ntuples} expense#{'s' if list.ntuples != 1}"
        end
    end
    
    def display_expenses_total(list)
        puts "-" * 50
        total = @db.exec("SELECT ROUND(SUM(amount),2) FROM expenses").values
        puts " Total #{total.flatten.first.rjust(25)}"
    end
    
    def display_expenses(list)
        display_count(list)
        unless list.ntuples == 0
            list.each do |item| 
                result = [item["id"].rjust(4), 
                          item["created_on"].rjust(10), 
                          item["amount"].rjust(12), 
                          item["memo"]]
                puts result.join(" | ")
            end
            display_expenses_total(list)
        end
    end
    
    def double_check?(message)
        puts message
        input = STDIN.getch
        input == 'y'
    end
end

class CLI
    def initialize
        @application = ExpenseData.new
    end
    
    def run(arguments)
        command = arguments.first.downcase
        case command
        when "list"
            @application.list_all
        when "add"
            @application.add_expense(arguments[1], arguments[2], arguments[3])
        when "search"
            @application.search_expense(arguments[1])
        when "delete"
            @application.delete_expense(arguments[1])
        when "clear"
            @application.delete_all_expenses
        else
            @application.display_menu
        end
    end
    
end

CLI.new.run(ARGV)
